// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  SUPERHOST
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  firstName             String?
  lastName              String?
  email                 String?                @unique
  name                  String?
  dob                   DateTime? // Adding date of birth field
  hashedPassword        String?
  emailVerified         DateTime?
  image                 String?
  phoneNumber           String? // Adding phone number field
  country               String? // Adding country field
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole               @default(USER)
  accounts              Account[]
  TwoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Listing               Listing[]
  Reservation           Reservation[]
  Session               Session[]
  favoriteIds           String[]               @db.ObjectId
  Authenticator         Authenticator[]
  sendMarketing         Boolean                @default(false)
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model OtpVerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  phone   String
  token   String   @unique
  expires DateTime

  @@unique([phone, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Authenticator {
  id                   String  @id @default(cuid()) @map("_id")
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id               String     @id @default(cuid()) @map("_id")
  title            String
  description      String
  imageSrc         String[]
  createdAt        DateTime   @default(now())
  category         String
  roomCount        Int
  bedCount         Int
  bedType          String
  minimumDays      Int
  unavailableDates DateTime[]

  checkInTime  String
  checkOutTime String

  policyCustomize Boolean @default(false)

  refundDaysThreshold Int? @default(5)

  fullRefundDay Int? @default(5) //five days before the 

  partialRefundDays Int? @default(5)
  fullRefundHours   Int?

  allowStartDatePartialRefund Boolean @default(false)
  allowServiceChargeRefund    Boolean @default(false)

  partialRefundTimeHours String
  bathroomCount          Int
  guestCount             Int
  locationValue          String
  superhostId            String
  descriptionId          String
  price                  Int

  superHost   User        @relation(fields: [superhostId], references: [id], onDelete: Cascade)
  Description Description @relation(fields: [descriptionId], references: [id], onDelete: Cascade)

  coHost         String[]
  reservations   Reservation[]
  AdditionalCost AdditionalCost[]
}

model AdditionalCost {
  id        String  @id @default(cuid()) @map("_id")
  name      String
  price     Int
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId String
}

model Description {
  id          String    @id @default(cuid()) @map("_id")
  title       String
  description String[]
  Listing     Listing[]
}

model Reservation {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  listingId  String
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
